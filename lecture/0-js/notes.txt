Each browser has its own JavaScript engine, which either
interprets the code, or uses some sort of lazy compilation
.) V8: Chrome and node.j

ECMA Standard
------------------------------------------------
// comments are prefixed with double slashes
/*
 * Multi-line comments look like this
 */

// camelCase is preferred
// double-quotes create strings
const firstName = "jordan";

// semicolons are optional
// single-quotes also create strings
const lastName = 'Hayashi'

// arrays can be declared inline
// arrays can have multiple types (more on types later)
const arr = [
  'string',
  42,
  function() { console.log('hi') },
]

// this returns the element at the 2nd index and invokes it
arr[2]()

// this will iterate through the array and console log each element
for (let i = 0; i < arr.length; i++) {
  console.log(arr[i])
}

------------------------------------------------
TYPES
● Dynamic typing
● Primitive types (no methods, immutable)
  ○ undefined
  ○ null
  ○ boolean
  ○ number
  ○ string
  ○ (symbol)
● Objects

Typecasting? Coercion.
● Explicit vs. Implicit coercion
  ○ const x = 42;
  ○ const explicit = String(x); // explicit === "42"
  ○ const implicit = x + ""; // implicit === "42"
● == vs. ===
  ○ == coerces the types
  ○ === requires equivalent types

------------------------------------------------
const x = 42

// get type by using "typeof"
console.log(typeof x) // number
console.log(typeof undefined) // undefined

// this may surprise you...
console.log(typeof null)

a = function f () {}
typeof a 
"function"

---------------------------------------------------


FALSY VALUES ARE ANYTHING IF TYPECASTED TO BOOL BECOMES FALSE
if ([]) 
{}

if ({})
{}


Coercion, cont.
● Which values are falsy?
  ○ undefined
  ○ null
  ○ false
  ○ +0, -0, NaN
  ○ ""
● Which values are truthy?
  ○ {}
  ○ []
  ○ Everything else

--------------------------------------

Objects, Arrays, Functions, Objects
ANYTHING NOT A   ○ undefined
  ○ null
  ○ boolean
  ○ number
  ○ string
  ○ (symbol)
IS AN OBJECT
● Nope, I put it 4 times.
● ^ did I put Objects twice?
● Everything else is an object
● Prototypal Inheritance (more on this later)
Function is of type funtion but is also an Object because of Prototypical Inheritance

Primitives vs. Objects
● Primitives are immutable
● Objects are mutable and stored by reference
● Passing by reference vs. passing by value

------------------------------

const o = new Object()
o.firstName = 'Jordan'
o.lastName = 'Hayashi'
o.isTeaching = true
o.greet = function() { console.log('Hello!') }

console.log(JSON.stringify(o))

const o2 = {}
o2['firstName'] = 'Jordan'
const a = 'lastName'
o2[a] = 'Hayashi'

const o3 = {
  firstName: 'Jordan',
  lastName: 'Hayashi',
  greet: function() {
    console.log('hi')
  },
  address: {
    street: "Main st.",
    number: '111'
  }
}

o.1 // not allowed
o["1"] // is allowed
o[1] // is allowed



------------------------
DEEP COPY vs SHALLOW COPY

const o = {
  a: 'a',
  b: 'b',
  obj: {
    key: 'key',
  },
}

const o2 = o

o2.a = 'new value'

// o and o2 reference the same object
console.log(o.a)

// this shallow-copies o into o3
const o3 = Object.assign({}, o)

// deep copy
function deepCopy(obj) {
  // check if vals are objects
  // if so, copy that object (deep copy)
  // else return the value
  const keys = Object.keys(obj)

  const newObject = {}

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (typeof obj[key] === 'object') {
      newObject[key] = deepCopy(obj[key])
    } else {
      newObject[key] = obj[key]
    }
  }

  return newObject
}
// TESTING DEEPCOPY
const o4 = deepCopy(o)

o.obj.key = 'new key!'
console.log(o4.obj.key)

---------------------------------------

Prototypal Inheritance
● Most primitive types have object wrappers
  ○ String()
  ○ Number()
  ○ Boolean()
  ○ Object()
  ○ (Symbol())
  
● JS will automatically “box” (wrap) primitive values so you
  have access to methods
  
42.toString() // Errors
const x = 42;
x.toString() // "42"
x.__proto__ // [Number: 0]
x instanceof Number // false
  
● Why use reference to prototype?  // coz deep copy is expensive
● What’s the alternative? // deep copy everything which takes a lot of time
● What’s the danger? // changing any prototype's internals once will change it for everybody who inherits from it


Scope
● Variable lifetime
  ○ Lexical scoping (var): from when they’re declared until when their
  function ends
  ○ Block scoping (const, let): until the next } is reached
● Hoisting
  ○ Function definitions are hoisted, but not lexically-scoped initializations
● But how/why?

The JavaScript Engine

● Before executing the code, the engine reads the entire file
and will throw a syntax error if one is found
  ○ Any function definitions will be saved in memory
  ○ Variable initializations will not be run, but lexically-scoped variable names
  will be declared

The Global Object
● All variables and functions are actually parameters and
methods on the global object
  ○ Browser global object is the `window` object
  ○ Node.js global object is the `global` object
